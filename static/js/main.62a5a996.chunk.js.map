{"version":3,"sources":["services/AuthService.ts","components/Copyright.tsx","components/SignIn.tsx","App.tsx","theme.tsx","serviceWorker.ts","index.tsx"],"names":["AuthService","_isAuthenticated","this","Promise","resolve","reject","token","String","localStorage","getItem","e","console","error","removeAuth","options","method","url","process","headers","Accept","Authorization","axios","then","response","status","addAuth","catch","username","password","data","setItem","removeItem","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","card","minWidth","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","secondary","main","form","width","submit","SignIn","authService","classes","useState","isLoginError","setIsLoginError","isLoading","setIsLoading","Container","component","maxWidth","CssBaseline","className","Avatar","onSubmit","event","preventDefault","FormData","currentTarget","get","signIn","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","onChange","type","FormControlLabel","control","Checkbox","value","Card","CardContent","Button","disabled","App","log","createMuiTheme","primary","red","A400","background","default","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62a5a996.chunk.js","sourcesContent":["import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\nclass AuthService {\r\n  private _isAuthenticated: boolean;\r\n  public get isAuthenticated(): boolean {\r\n    return this._isAuthenticated;\r\n  }\r\n\r\n  constructor() {\r\n    this._isAuthenticated = false;\r\n  }\r\n\r\n  public authenticate(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      if (this._isAuthenticated) resolve();\r\n\r\n      let token: string = '';\r\n      try {\r\n        token = String(localStorage.getItem('token'));\r\n      } catch (e) {\r\n        console.error('Local Storage not supported');\r\n      }\r\n\r\n      if (!token) {\r\n        this.removeAuth();\r\n        reject();\r\n      }\r\n\r\n      const url = `${process.env.REACT_APP_API_BASE_URL}${process.env.REACT_APP_API_AUTH}`;\r\n      const options: AxiosRequestConfig = {\r\n        method: 'GET',\r\n        url: url,\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json;charset=UTF-8',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      };\r\n      axios(options)\r\n        .then((response: AxiosResponse<any>) => {\r\n          const responseOK = response && response.status === 200;\r\n          if (responseOK) {\r\n            this.addAuth();\r\n            resolve();\r\n          } else {\r\n            this.removeAuth();\r\n            reject();\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.removeAuth();\r\n          reject();\r\n        });\r\n    });\r\n  }\r\n\r\n  public signIn(username: string, password: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      const url = `${process.env.REACT_APP_API_BASE_URL}${process.env.REACT_APP_API_LOGIN}`;\r\n      const options: AxiosRequestConfig = {\r\n        method: 'POST',\r\n        url: url,\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json;charset=UTF-8'\r\n        },\r\n        data: {\r\n          username,\r\n          password\r\n        }\r\n      };\r\n      axios(options)\r\n        .then((response: AxiosResponse<any>) => {\r\n          const responseOK = response && response.status === 201;\r\n          if (responseOK) {\r\n            this.addAuth(response.data.token);\r\n            resolve();\r\n          } else {\r\n            this.removeAuth();\r\n            reject();\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.removeAuth();\r\n          reject();\r\n        });\r\n    });\r\n  }\r\n\r\n  public signOut(): Promise<void> {\r\n    return new Promise<void>(resolve => {\r\n      this.removeAuth();\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  private addAuth(token?: string): void {\r\n    if (token) {\r\n      try {\r\n        localStorage.setItem('token', token);\r\n      } catch (e) {\r\n        console.error('Local Storage not supported');\r\n      }\r\n    }\r\n    this._isAuthenticated = true;\r\n  }\r\n\r\n  private removeAuth(): void {\r\n    try {\r\n      localStorage.removeItem('token');\r\n    } catch (e) {\r\n      console.error('Local Storage not supported');\r\n    }\r\n    this._isAuthenticated = false;\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nconst Copyright: React.FC = () => {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright Â© '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>\r\n      {` ${new Date().getFullYear()}.`}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default Copyright;\r\n","import React, { FormEvent, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\r\n\r\nimport AuthService from '../services/AuthService';\r\nimport Copyright from './Copyright';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  '@global': {\r\n    body: {\r\n      backgroundColor: theme.palette.common.white\r\n    }\r\n  },\r\n  card: {\r\n    minWidth: 275\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  }\r\n}));\r\n\r\ninterface SignInProps {\r\n  authService: AuthService;\r\n}\r\n\r\nconst SignIn: React.FC<SignInProps> = ({ authService }) => {\r\n  const classes = useStyles();\r\n  const [isLoginError, setIsLoginError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // const history = useHistory();\r\n  // const location = useLocation();\r\n  // const { from } = location.state || { from: { pathname: `${process.env.PUBLIC_URL}/` } };\r\n\r\n  const onSubmitLogin = (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    const data = new FormData(event.currentTarget);\r\n    const username: string = String(data.get('username'));\r\n    const password: string = String(data.get('password'));\r\n    authService\r\n      .signIn(username, password)\r\n      .then(() => {\r\n        setIsLoading(false);\r\n        // history.replace(from);\r\n      })\r\n      .catch(() => {\r\n        setIsLoading(false);\r\n        setIsLoginError(true);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={onSubmitLogin}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"username\"\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            autoComplete=\"username\"\r\n            autoFocus\r\n            onChange={() => setIsLoginError(false)}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={() => setIsLoginError(false)}\r\n          />\r\n          <FormControlLabel control={<Checkbox value=\"remember\" color=\"primary\" />} label=\"Remember me\" />\r\n          {isLoginError && (\r\n            <Card className={classes.card}>\r\n              <CardContent>\r\n                <Typography variant=\"body1\" component=\"p\" color=\"error\">\r\n                  Incorrect username and / or password.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n          {isLoading ? (\r\n            <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit} disabled>\r\n              <HourglassEmptyIcon />\r\n            </Button>\r\n          ) : (\r\n            <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n              Sign In\r\n            </Button>\r\n          )}\r\n        </form>\r\n      </div>\r\n      <Copyright />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  useHistory,\n  useLocation,\n  RouteProps\n} from 'react-router-dom';\n\nimport AuthService from './services/AuthService';\nimport SignIn from './components/SignIn';\nimport Dashboard from './containers/Dashboard';\n\nconst App: React.FC = () => {\n  const [authService] = useState(new AuthService());\n  console.log(process.env.PUBLIC_URL);\n  return (\n    <SignIn authService={authService} />\n    // <Router>\n    //   <Switch>\n    //     <HomeRoute authService={authService} path={`${process.env.PUBLIC_URL}/`} exact>\n    //       <h1>Loading...</h1>\n    //     </HomeRoute>\n    //     <SignInRoute authService={authService} path={`${process.env.PUBLIC_URL}/signIn`}>\n    //       <SignIn authService={authService} />\n    //     </SignInRoute>\n    //     <DashboardRoute authService={authService} path={`${process.env.PUBLIC_URL}/dashboard`}>\n    //       <Dashboard />\n    //     </DashboardRoute>\n    //   </Switch>\n    // </Router>\n  );\n};\n\ninterface PrivateRouteProps extends RouteProps {\n  authService: AuthService;\n}\n\nconst HomeRoute: React.FC<PrivateRouteProps> = ({ authService, children, ...rest }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { from } = location.state || { from: { pathname: `${process.env.PUBLIC_URL}/` } };\n\n  const authenticate = (): void => {\n    authService\n      .authenticate()\n      .then(() => {\n        history.replace(from);\n      })\n      .catch(() => {\n        history.push('/signIn', { from: location });\n      });\n  };\n\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => {\n        if (authService.isAuthenticated) {\n          return (\n            <Redirect\n              to={{\n                pathname: `${process.env.PUBLIC_URL}/dashboard`,\n                state: { from: location }\n              }}\n            />\n          );\n        } else {\n          authenticate();\n          return children;\n        }\n      }}\n    />\n  );\n};\n\nconst SignInRoute: React.FC<PrivateRouteProps> = ({ authService, children, ...rest }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { from } = location.state || { from: { pathname: `${process.env.PUBLIC_URL}/` } };\n\n  const authenticate = (): void => {\n    authService\n      .authenticate()\n      .then(() => {\n        history.replace(from);\n      })\n      .catch(() => {\n        console.log('Unauthenticated');\n      });\n  };\n\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => {\n        if (authService.isAuthenticated) {\n          return (\n            <Redirect\n              to={{\n                pathname: `${process.env.PUBLIC_URL}/dashboard`,\n                state: { from: location }\n              }}\n            />\n          );\n        } else {\n          authenticate();\n          return children;\n        }\n      }}\n    />\n  );\n};\n\nconst DashboardRoute: React.FC<PrivateRouteProps> = ({ authService, children, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        authService.isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: `${process.env.PUBLIC_URL}/signIn`,\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default App;\n","import red from '@material-ui/core/colors/red';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#556cd6'\r\n    },\r\n    secondary: {\r\n      main: '#19857b'\r\n    },\r\n    error: {\r\n      main: red.A400\r\n    },\r\n    background: {\r\n      default: '#fff'\r\n    }\r\n  }\r\n});\r\n\r\nexport default theme;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'dotenv/config';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport App from './App';\nimport theme from './theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}